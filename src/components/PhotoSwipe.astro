---
import "photoswipe/style.css";
import type { ImageFragment } from "../graphql/__generated__/operations";
import { importImage } from "astro-imagetools/api";
import {
  buildImageUrl,
  getFileAttributes,
  getImageUrl,
} from "../lib/image.helper";
import PictureMosaicItem from "./PictureMosaicItem.astro";
import { logger } from "../lib/logger";

interface Props {
  images: ImageFragment[];
}

const { images } = Astro.props;

const imgs = await Promise.all(
  images.map(async (i) => {
    const attr = getFileAttributes(i);
    const sourceUrl = getImageUrl(i);

    const largeImage = {
      height: attr.formats.large?.height || attr.height,
      width: attr.formats.large?.width || attr.width,
      url: await importImage(
        buildImageUrl(attr.formats.large?.url || attr.url),
      ),
    };
    return {
      url: sourceUrl,
      alternativeText: getFileAttributes(i).alternativeText,
      preview: attr.formats.medium
        ? buildImageUrl(attr.formats.medium.url)
        : sourceUrl,
      large: largeImage,
    };
  }),
);
logger.info("PhotoSwipe", { imgs });
---

<div id="lightgallery">
  <div
    id="mosaic-container"
    class="columns-2 gap-5 mx-2 sm:gap-8 md:columns-2 lg:columns-3 [&>a>img:not(:first-child)]:mt-8"
  >
    {
      imgs.map(({ alternativeText, large, preview }) => (
        <a
          data-pswp-src={large.url}
          data-pswp-width={large.width}
          data-pswp-height={large.height}
        >
          <PictureMosaicItem alt={alternativeText} src={preview} />
        </a>
      ))
    }
  </div>
</div>
<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";

  const lightbox = new PhotoSwipeLightbox({
    gallery: "#mosaic-container",
    children: "a",
    pswpModule: () => import("photoswipe"),
    preload: [2, 2],
    tapAction: "next",
    doubleTapAction: false,
    bgClickAction: "close",
    bgOpacity: 0.9,
  });
  lightbox.init();
</script>
